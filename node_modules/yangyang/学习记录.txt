1:npm init

2: npm i webpack --save-dev

3:在工程中创建三个文件：index.html、app.js 和 module.js。

4:执行 Webpack 命令来生成我们的第一个打包结果  .\node_modules\.bin\webpack app.js dist\bundle.js

5:定义配置文件 webpack.config.js
    (1) entry：工程资源的入口

    (2) output：这是一个配置对象，通过它我们可以对最终打包的产物进行配置。path：打包资源放置的路径，必须为绝对路径。filename：打包结果的文件名。

    (3).\node_modules\.bin\webpack

    (4)通过 webpack-dev-server 起一个本地服务  执行 node_modules\.bin\webpack-dev-server，访问 localhost:3000 即可看到结果。
        1. 不会刷新浏览器
        $ webpack-dev-server
        2. 刷新浏览器
        $ webpack-dev-server --inline
        3. 重新加载改变的部分，HRM失败则刷新页面
        $ webpack-dev-server  --inline --hot

        devServer: {
                port: 3000, // 服务端口
                publicPath: "/dist/" // 打包后资源路径，后面会详细解释
        }
    (5)loader  test：代表我们希望 Webpack 对哪种类型的文件使用该 loader。通过正则匹配我们找出符合要求的以 .css 结尾文件名的文件。 loader：对所匹配到文件进行处理的 loader 的名字。
        module: {
                loaders: [
                    {
                        test: /\.css/,
                        loader: 'style-loader!css-loader'
                    }
                ]
        }

    (6)

6:一切皆模块与 loaders  style-loader,css-loader

7:资源压缩  npm i uglifyjs-webpack-plugin --save-dev
    plugins: [
            new UglifyJSPlugin()
        ]

8:按需加载

9:使用 Webpack 的构建特性
    1、tree-shaking
    2、scope-hoisting（作用域提升）是由 Webpack3 提供的特性
10:公共代码与 CommonsChunkPlugin

11:从动态链接库的思想谈打包   vendor。

12:利用多进程   Happypack 是一个可以有效利用多进程来编译文件的工具。

13:

14:

15:
